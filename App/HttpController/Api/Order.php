<?php
/**
 * Created by PhpStorm.
 * User: x
 * Date: 2019/1/8
 * Time: 14:56
 */
namespace  App\HttpController\Api;

use App\Base\HomeBaseController;
use EasySwoole\Core\Http\Request;
use EasySwoole\Core\Http\Response;
use think\Db;

class Order extends HomeBaseController
{
    public function __construct(string $actionName, Request $request, Response $response)
    {
        parent::__construct($actionName, $request, $response);
    }

    protected function onRequest($action): ?bool
    {
        return parent::onRequest($action); // TODO: Change the autogenerated stub
    }
    // ----------------------  订单数据操作 ------------------------- //
    // 写入订单信息 , 频繁调用的接口 get  order_id content  json数据
    public function add_order(){
        $request = $this->request();
        $name = $request->getRequestParam('order_id');
        $stands = $request->getRequestParam('content');



    }


    // 订单系统 ----------------  分类操作  --------------------  //
    public function show_order_type(){
        $order_type = Db::name('ordertype')->select();
        $this->response()->withHeader('Content-type','application/json;charset=utf-8');
        $this->response()->write(json_encode($order_type));
    }

    // stands  name  订单系统新增分类
    public function add_order_type(){
        // 检查名字是否重复
        $request = $this->request();
        $name = $request->getRequestParam('name');
        $stands = $request->getRequestParam('stands');
        $has_name = Db::name('ordertype')->where('name',$name)->find();
        $this->response()->withHeader('Content-type','application/json;charset=utf-8');
        if($has_name){
            $this->response()->write(json_encode(['status' => 401, 'msg' => '名字重复']));
        }else{
            $save_type = Db::name('ordertype')->insert(['name'=>$name,'stands'=>$stands,'create_time'=>time()]);
            $this->response()->write(json_encode(['status' => 200, 'msg' => '名字不重复','data'=>$save_type]));
        }
    }

    // 查看订单分类信息
    public function edit_order_type(){
        $request = $this->request();
        $id = $request->getRequestParam('id');
        // 查找订单数据
        $order = Db::name('ordertype')->where('id',$id)->select();
        $this->response()->withHeader('Content-type','application/json;charset=utf-8');
        $this->response()->write(json_encode($order));
    }
    // 修改订单分类
    public function save_order_type(){
        $request = $this->request();
        $name = $request->getRequestParam('name');
        $stands = $request->getRequestParam('stands');
        $id = $request->getRequestParam('id');
        $has_id = Db::name('ordertype')->where('id',$id)->find();
        if($has_id){
            $chage_data = Db::name('ordertype')->where('id',$id)->update(['name'=>$name,'stands'=>$stands]);
            if($chage_data){
                $this->response()->write(json_encode(['status' => 200, 'msg' => '修改成功','data'=>$chage_data]));
            }else{
                $this->response()->write(json_encode(['status' => 402, 'msg' => '修改失败,请重试','data'=>$chage_data]));
            }
        }else{
            $this->response()->write(json_encode(['status' => 401, 'msg' => '数据不存在']));
        }
    }

    // 删除订单分类
    public function delete_order_type(){
        $request = $this->request();
        $id = $request->getRequestParam('id');
        $has_id = Db::name('ordertype')->where('id',$id)->find();
        if($has_id){
           // 判断订单分类下是否存在订单数据
            $has_data = Db::name('orderjson')->where('order_id',$id)->find();
            if($has_data){
                $this->response()->write(json_encode(['status' => 402, 'msg' => '订单下存在数据,不可以删除']));
            }else{
                $delete_data = Db::name('orderjson')->where('order_id',$id)->delete();
                if($delete_data){
                    $this->response()->write(json_encode(['status' => 200, 'msg' => '删除成功','data'=>$delete_data]));
                }else{
                    $this->response()->write(json_encode(['status' => 403, 'msg' => '删除失败','data'=>$delete_data]));
                }
            }
        }else{
            $this->response()->write(json_encode(['status' => 401, 'msg' => '数据不存在']));
        }
    }

    // json 请求模板
    public function json(){
        $sysinfo = Db::name('system')->where('id',2)->select();
        $this->response()->withHeader('Content-type','application/json;charset=utf-8');
        $this->response()->write(json_encode($sysinfo));
    }

}